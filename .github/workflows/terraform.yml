name: Terraform Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy infrastructure'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  ENVIRONMENT: ${{ inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
  TF_ACTION: ${{ inputs.action || 'plan' }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      storage_account: ${{ steps.bootstrap.outputs.storage_account_name }}
      container_name: ${{ steps.bootstrap.outputs.container_name }}
      resource_group: ${{ steps.bootstrap.outputs.resource_group_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Bootstrap Backend Storage
        id: bootstrap
        run: |
          cd terraform/bootstrap
          
          # Define expected names
          RG_NAME="kubemicrodemo-terraform-storage-rg"
          SA_NAME="tfstatekubemicro"
          CONTAINER_NAME="tfstate"
          
          # Check if resource group exists
          if az group show --name $RG_NAME &>/dev/null; then
            echo "Resource group '$RG_NAME' already exists, using existing details."
            # Set outputs directly using known values
            echo "storage_account_name=$SA_NAME" >> $GITHUB_OUTPUT
            echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
            echo "resource_group_name=$RG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Resource group '$RG_NAME' not found, running Terraform apply..."
            terraform init
            terraform apply -auto-approve \
              -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
              -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
              -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
              -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            # Check Terraform apply exit status explicitly
            if [ $? -ne 0 ]; then
              echo "::error::Terraform apply failed."
              exit 1
            fi
            
            echo "Terraform apply completed. Capturing outputs..."
            # Save outputs to files first
            terraform output -raw storage_account_name > storage_account.txt
            terraform output -raw container_name > container.txt
            terraform output -raw resource_group_name > resource_group.txt
            
            # Read from files and set outputs
            SA_NAME_OUTPUT=$(cat storage_account.txt)
            CONTAINER_NAME_OUTPUT=$(cat container.txt)
            RG_NAME_OUTPUT=$(cat resource_group.txt)

            echo "storage_account_name=$SA_NAME_OUTPUT" >> $GITHUB_OUTPUT
            echo "container_name=$CONTAINER_NAME_OUTPUT" >> $GITHUB_OUTPUT
            echo "resource_group_name=$RG_NAME_OUTPUT" >> $GITHUB_OUTPUT

            # Update variables for the final confirmation message
            SA_NAME=$SA_NAME_OUTPUT
            CONTAINER_NAME=$CONTAINER_NAME_OUTPUT
            RG_NAME=$RG_NAME_OUTPUT
          fi
          
          # Print confirmation (using the determined values)
          echo "Using backend infrastructure:"
          echo "Storage Account: $SA_NAME"
          echo "Container: $CONTAINER_NAME"
          echo "Resource Group: $RG_NAME"

  terraform:
    needs: bootstrap
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="resource_group_name=${{ needs.bootstrap.outputs.resource_group }}" \
            -backend-config="storage_account_name=${{ needs.bootstrap.outputs.storage_account }}" \
            -backend-config="container_name=${{ needs.bootstrap.outputs.container_name }}" \
            -backend-config="key=terraform-${{ env.ENVIRONMENT }}.tfstate" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -out=tfplan

      - name: Terraform Apply
        if: env.TF_ACTION == 'apply' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: env.TF_ACTION == 'destroy' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform
          terraform destroy -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Export Terraform Outputs
        if: env.TF_ACTION == 'apply' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
        id: terraform-outputs
        run: |
          cd terraform
          # Store json output in temp files first
          terraform output -json kubernetes_cluster_name > aks_cluster_name.json
          terraform output -json resource_group_name > aks_resource_group.json
          
          # Check exit codes (optional but good practice)
          if [ $? -ne 0 ]; then echo "::error::Failed to get resource_group_name output"; exit 1; fi
          echo "--- Content of aks_cluster_name.json ---"
          cat aks_cluster_name.json
          echo "--- End of aks_cluster_name.json ---"
          echo "--- Content of aks_resource_group.json ---"
          cat aks_resource_group.json
          echo "--- End of aks_resource_group.json ---"
          
          # Extract values by taking the last line and removing quotes (no jq needed)
          KUBE_CLUSTER_NAME=$(tail -1 aks_cluster_name.json | tr -d '"')
          if [ $? -ne 0 ]; then echo "::error::Failed to extract cluster name"; exit 1; fi
          
          AKS_RESOURCE_GROUP_NAME=$(tail -1 aks_resource_group.json | tr -d '"')
          if [ $? -ne 0 ]; then echo "::error::Failed to extract resource group name"; exit 1; fi
          
          # Set GitHub outputs
          echo "AKS_CLUSTER_NAME=$KUBE_CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "AKS_RESOURCE_GROUP=$AKS_RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          
          # Clean up temporary files
          rm aks_cluster_name.json aks_resource_group.json 
name: CI Pipeline

on:
  push:
    branches: [main, dev]
    paths:
      - 'frontend/**'
      - 'service-a/**'
      - 'service-b/**'
      - 'helm-chart/**'
      - 'README.md'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  SERVICE_A_IMAGE_NAME: ${{ github.repository }}/service-a
  SERVICE_B_IMAGE_NAME: ${{ github.repository }}/service-b
  ENVIRONMENT: ${{ inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate version
        id: version
        run: |
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.FRONTEND_IMAGE_NAME) || '' }}

      - name: Build and push Service A Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-a
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_A_IMAGE_NAME) || '' }}

      - name: Build and push Service B Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-b
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_B_IMAGE_NAME) || '' }}

  validate-helm:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
          
      - name: Lint Helm chart
        run: helm lint ./helm-chart
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create kind cluster
        uses: helm/kind-action@v1.5.0
        
      - name: Validate Helm template
        run: |
          # Render and validate the application templates
          helm template ./helm-chart \
            -f ./helm-chart/values.yaml \
            --namespace microservices-demo \
            --debug

  update-version:
    needs: [build-and-push, validate-helm]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Generate version
        id: version
        run: |
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
          
      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
      - name: Update image versions in values file
        run: |
          # Update the image tags in values.yaml
          yq -i '.frontend.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          yq -i '.serviceA.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          yq -i '.serviceB.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          
      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          git add ./helm-chart/values.yaml
          git commit -m "Update image versions to ${{ steps.version.outputs.VERSION }}"
          git push 
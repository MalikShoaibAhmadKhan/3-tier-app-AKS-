name: CI Pipeline

on:
  push:
    branches: [main, dev]
    paths:
      - 'frontend/**'
      - 'service-a/**'
      - 'service-b/**'
      - 'helm-chart/**'
      - 'README.md'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  SERVICE_A_IMAGE_NAME: ${{ github.repository }}/service-a
  SERVICE_B_IMAGE_NAME: ${{ github.repository }}/service-b
  ENVIRONMENT: ${{ inputs.environment || 'dev' }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-scan.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: '3-tier-app'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate version
        id: version
        run: |
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Create Trivy results directory
        run: mkdir -p trivy-results

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.FRONTEND_IMAGE_NAME) || '' }}
          sbom: true
          provenance: true

      - name: Scan Frontend image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-results/trivy-results-frontend.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Build and push Service A Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-a
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_A_IMAGE_NAME) || '' }}
          sbom: true
          provenance: true

      - name: Scan Service A image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-results/trivy-results-service-a.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Build and push Service B Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-b
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:latest
            ${{ env.ENVIRONMENT == 'prod' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_B_IMAGE_NAME) || '' }}
          sbom: true
          provenance: true

      - name: Scan Service B image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-results/trivy-results-service-b.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results/
          retention-days: 1

  validate-helm:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
          
      - name: Lint Helm chart
        run: helm lint ./helm-chart
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create kind cluster
        uses: helm/kind-action@v1.5.0
        
      - name: Validate Helm template
        run: |
          # Render and validate the application templates
          helm template ./helm-chart \
            -f ./helm-chart/values.yaml \
            --namespace microservices-demo \
            --output-dir ./rendered-manifests \
            --debug

      - name: Create KubeLinter results directory
        run: mkdir -p kube-linter-results

      - name: Run KubeLinter
        uses: stackrox/kube-linter-action@v1
        with:
          directory: ./rendered-manifests
          config: .kube-linter.yaml
          format: sarif
          output-file: kube-linter-results/kube-linter.sarif
        continue-on-error: true

      - name: Upload KubeLinter results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kube-linter-results
          path: kube-linter-results/
          retention-days: 1

  upload-security-results:
    needs: [build-and-push, validate-helm]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    if: always()
    steps:
      - name: Download Trivy results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: trivy-results
          path: trivy-results

      - name: Download KubeLinter results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: kube-linter-results
          path: kube-linter-results

      - name: List files
        run: |
          echo "Current directory:"
          pwd
          echo "All files:"
          find . -type f | sort
          
          # Create directories if they don't exist
          mkdir -p trivy-results
          mkdir -p kube-linter-results
          
          echo "Trivy results directory:"
          ls -la trivy-results/ || true
          echo "KubeLinter results directory:"
          ls -la kube-linter-results/ || true

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('trivy-results/*.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: trivy-results/*.sarif
          category: trivy-container-scanning
          wait-for-processing: true

      - name: Upload KubeLinter SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('kube-linter-results/*.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: kube-linter-results/*.sarif
          category: kube-linter-scan
          wait-for-processing: true

  update-version:
    needs: [build-and-push, validate-helm]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate version
        id: version
        run: |
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
          
      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
      - name: Update image versions in values files
        run: |
          # Update the image tags in values.yaml
          yq -i '.frontend.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          yq -i '.serviceA.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          yq -i '.serviceB.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values.yaml
          
          # Update the image tags in values-local.yaml
          yq -i '.frontend.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values-local.yaml
          yq -i '.serviceA.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values-local.yaml
          yq -i '.serviceB.image.tag = "${{ steps.version.outputs.VERSION }}"' ./helm-chart/values-local.yaml
          
      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          git add ./helm-chart/values.yaml ./helm-chart/values-local.yaml
          git commit -m "Update image versions to ${{ steps.version.outputs.VERSION }}"
          git push 
name: Deploy ArgoCD Applications

on:
  workflow_run:
    workflows: ["Terraform Infrastructure", "CI Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy ArgoCD applications'
        required: true
        default: 'all'
        type: choice
        options: [all, dev, prod]
      action:
        description: 'Action to perform: deploy or destroy'
        required: true
        default: 'deploy'
        type: choice
        options: [deploy, destroy]

env:
  ENVIRONMENT: ${{ inputs.environment || 'all' }}
  ACTION: ${{ inputs.action || 'deploy' }}

jobs:
  deploy-argocd-apps:
    if: (github.event.workflow_run.conclusion == 'success' && github.event_name == 'workflow_run') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP || 'aks-gitops-rg' }} \
            --name ${{ secrets.AKS_CLUSTER_NAME || 'aks-gitops-cluster' }}
            
      # Install ArgoCD if not already installed
      - name: Ensure ArgoCD is installed
        run: |
          if ! kubectl get namespace argocd &> /dev/null; then
            kubectl create namespace argocd
            # Apply official stable manifest directly from Argo CD repo
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            
            echo "Waiting for ArgoCD deployments to start (may take several minutes)..."
            # Wait for essential components: server deployment and application-controller statefulset (10 minutes each)
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd || echo "Warning: ArgoCD Server wait timed out."
            # Use the correct resource type (StatefulSet) for the application controller
            kubectl wait --for=jsonpath='{.status.readyReplicas}'=1 --timeout=600s statefulset/argocd-application-controller -n argocd || echo "Warning: ArgoCD Application Controller wait timed out."
            
            # Even if the wait times out, continue but provide detailed debugging info
            echo "Checking detailed ArgoCD status:"
            kubectl get deployments -n argocd
            echo "Checking ArgoCD pods:"
            kubectl get pods -n argocd
            echo "Checking pod logs for argocd-server:"
            kubectl logs -l app.kubernetes.io/name=argocd-server -n argocd --tail=50 || true
          fi
          
      # Install Azure Key Vault CSI Driver if not already installed
      - name: Ensure Key Vault CSI Driver is installed
        run: |
          # Note: Check for argocd-application-controller readiness is handled in the previous ArgoCD install step
          echo "Applying Key Vault CSI Driver installer manifest..."
          # Apply installer which creates ArgoCD applications
          # Make sure argo-cd/key-vault-csi-driver-installer.yaml points its Applications
          # to the official Helm charts for secrets-store-csi-driver and secrets-store-provider-azure
          kubectl apply -f argo-cd/key-vault-csi-driver-installer.yaml
          
          echo "Fetching details for CSI Driver ArgoCD applications..."
          sleep 5 # Short delay to allow ArgoCD to process
          echo "--- Key Vault CSI Driver Application YAML ---"
          kubectl get application key-vault-csi-driver -n argocd -o yaml || echo "Failed to get CSI driver app YAML"
          echo "--- Key Vault CSI Driver Application Events ---"
          kubectl get events -n argocd --field-selector involvedObject.kind=Application,involvedObject.name=key-vault-csi-driver --sort-by='.lastTimestamp' || echo "Failed to get CSI driver app events"
          echo "--- Key Vault Provider Application YAML ---"
          kubectl get application key-vault-provider -n argocd -o yaml || echo "Failed to get provider app YAML"
          echo "--- Key Vault Provider Application Events ---"
          kubectl get events -n argocd --field-selector involvedObject.kind=Application,involvedObject.name=key-vault-provider --sort-by='.lastTimestamp' || echo "Failed to get provider app events"
          echo "--- End Application Details ---"
          
          # Wait for ArgoCD applications to sync (up to 5 minutes)
          echo "Waiting for CSI driver ArgoCD applications to sync..."
          for i in {1..30}; do
            SYNC_STATUS_CSI=$(kubectl get application -n argocd key-vault-csi-driver -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
            SYNC_STATUS_PROVIDER=$(kubectl get application -n argocd key-vault-provider -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
            echo "Sync status (attempt $i/30): CSI Driver: $SYNC_STATUS_CSI, Provider: $SYNC_STATUS_PROVIDER"
            
            if [[ "$SYNC_STATUS_CSI" == "Synced" && "$SYNC_STATUS_PROVIDER" == "Synced" ]]; then
              echo "Both applications successfully synced!"
              break
            fi
            sleep 10
          done
          
          # Check if sync was actually successful before proceeding
          FINAL_SYNC_STATUS_CSI=$(kubectl get application -n argocd key-vault-csi-driver -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
          FINAL_SYNC_STATUS_PROVIDER=$(kubectl get application -n argocd key-vault-provider -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
          if [[ "$FINAL_SYNC_STATUS_CSI" != "Synced" || "$FINAL_SYNC_STATUS_PROVIDER" != "Synced" ]]; then
            echo "Error: One or both Key Vault CSI Driver ArgoCD applications failed to sync."
            echo "CSI Driver Status: $FINAL_SYNC_STATUS_CSI"
            echo "Provider Status: $FINAL_SYNC_STATUS_PROVIDER"
            # Optionally fail the workflow here: exit 1
          fi
          
          # Check for running CSI driver pods as final verification
          echo "Verifying CSI driver pod status..."
          # Note: Namespace might be different if overridden in Helm values (default is usually kube-system)
          kubectl get pods -n kube-system -l app=secrets-store-csi-driver --no-headers=true
          kubectl get pods -n kube-system -l app=csi-secrets-store-provider-azure --no-headers=true
          echo "CSI driver pod verification complete."
          
          # Now wait for the CRD to be available (additional 2 minutes)
          echo "Waiting for Secret Provider Classes CRD to be established..."
          kubectl wait --for=condition=established --timeout=120s crd/secretproviderclasses.secrets-store.csi.x-k8s.io || echo "CRD wait timed out, checking if it exists"
          
          # Check if the CRD exists regardless of the wait result
          if kubectl get crd secretproviderclasses.secrets-store.csi.x-k8s.io &>/dev/null; then
            echo "Secret Provider Classes CRD is available"
          else
            echo "Warning: Secret Provider Classes CRD is not available yet. Proceeding anyway."
          fi
          
      # Update secret provider with tenant ID
      - name: Update secret-provider.yaml with tenant ID
        run: |
          # Replace placeholder with actual tenant ID
          sed -i "s/\${TENANT_ID}/${{ secrets.AZURE_TENANT_ID }}/g" argo-cd/secret-provider.yaml
          kubectl apply -f argo-cd/secret-provider.yaml

      # Create ArgoCD project
      - name: Create ArgoCD Project
        run: |
          sed -i "s|https://github.com/your-username/kubemicrodemo.git|${{ github.server_url }}/${{ github.repository }}.git|g" argo-cd/project.yaml
          kubectl apply -f argo-cd/project.yaml
        
      # Create Dev Environment Application
      - name: Create Dev Environment Application
        if: ${{ env.ENVIRONMENT == 'all' || env.ENVIRONMENT == 'dev' }}
        run: |
          # Update repository URL with actual repo URL
          sed -i "s|https://github.com/your-username/kubemicrodemo.git|${{ github.server_url }}/${{ github.repository }}.git|g" argo-cd/applications/dev.yaml
          kubectl apply -f argo-cd/applications/dev.yaml
        
      # Create Prod Environment Application
      - name: Create Prod Environment Application
        if: ${{ env.ENVIRONMENT == 'all' || env.ENVIRONMENT == 'prod' }}
        run: |
          # Update repository URL with actual repo URL
          sed -i "s|https://github.com/your-username/kubemicrodemo.git|${{ github.server_url }}/${{ github.repository }}.git|g" argo-cd/applications/prod.yaml
          kubectl apply -f argo-cd/applications/prod.yaml
          
      # Print ArgoCD server URL
      - name: Print ArgoCD server URL
        run: |
          echo "Ensuring argocd-server service is type LoadBalancer..."
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}' || echo "Patch command failed, maybe already LoadBalancer?"
          
          echo "Waiting for ArgoCD server to get external IP..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' service/argocd-server -n argocd --timeout=300s || echo "ArgoCD server service not available yet or didn't get an IP"
          
          if [[ $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) ]]; then
            echo "ArgoCD server URL: https://$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
            echo "Default username: admin"
            echo "Get the password with: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d"
          else
            echo "ArgoCD server doesn't have an external IP yet"
          fi
          
      # Print application URLs
      - name: Print application URLs
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "all" || "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            echo "Waiting for dev frontend service to get external IP..."
            kubectl -n microservices-dev wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' service/frontend --timeout=300s || echo "Dev frontend service not available yet"
            
            if [[ $(kubectl -n microservices-dev get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) ]]; then
              echo "Dev Application URL: http://$(kubectl -n microservices-dev get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
            fi
          fi
          
          if [[ "${{ env.ENVIRONMENT }}" == "all" || "${{ env.ENVIRONMENT }}" == "prod" ]]; then
            echo "Waiting for prod frontend service to get external IP..."
            kubectl -n microservices-prod wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' service/frontend --timeout=300s || echo "Prod frontend service not available yet"
            
            if [[ $(kubectl -n microservices-prod get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) ]]; then
              echo "Prod Application URL: http://$(kubectl -n microservices-prod get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
            fi
          fi

  destroy-argocd-resources:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    needs: [] # Make independent or dependent if needed
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP || 'aks-gitops-rg' }} \
            --name ${{ secrets.AKS_CLUSTER_NAME || 'aks-gitops-cluster' }}

      - name: Delete ArgoCD Applications (Dev/Prod)
        run: |
          echo "Deleting ArgoCD applications..."
          if [[ "${{ env.ENVIRONMENT }}" == "all" || "${{ env.ENVIRONMENT }}" == "dev" ]]; then
            kubectl delete application dev -n argocd --ignore-not-found=true
          fi
          if [[ "${{ env.ENVIRONMENT }}" == "all" || "${{ env.ENVIRONMENT }}" == "prod" ]]; then
            kubectl delete application prod -n argocd --ignore-not-found=true
          fi
          # Add a small wait for applications to be deleted before deleting the project
          sleep 15

      - name: Delete ArgoCD Project
        run: |
          echo "Deleting ArgoCD project..."
          # Diagnostic step: Check if the CRD is recognized
          kubectl get crd appprojects.argoproj.io || echo "AppProject CRD not found (diagnostic)"
          
          # Delete using the manifest file directly
          kubectl delete -f argo-cd/project.yaml -n argocd --ignore-not-found=true

          # Fallback/Alternative (now commented out):
          # echo "Deleting ArgoCD project by name (fallback method)..."
          # kubectl delete appprojects.argoproj.io default -n argocd --ignore-not-found=true
          sleep 5

      - name: Delete Secret Provider Class
        run: |
          echo "Deleting SecretProviderClass..."
          kubectl delete -f argo-cd/secret-provider.yaml --ignore-not-found=true
          # Also delete the related secret if it exists (created by the provider class)
          kubectl delete secret secrets-store-inline -n microservices-dev --ignore-not-found=true || true # Adjust namespace if needed
          kubectl delete secret secrets-store-inline -n microservices-prod --ignore-not-found=true || true # Adjust namespace if needed
          sleep 5
          
      - name: Delete Key Vault CSI Driver ArgoCD Apps
        run: |
          echo "Deleting Key Vault CSI Driver ArgoCD applications..."
          kubectl delete application key-vault-csi-driver -n argocd --ignore-not-found=true
          kubectl delete application key-vault-provider -n argocd --ignore-not-found=true
          # Wait for applications to terminate
          sleep 15

      # Optional: Delete the CSI driver resources directly if Applications don't clean up fully
      # - name: Delete Key Vault CSI Driver Components (Fallback)
      #   run: |
      #     echo "Attempting direct deletion of CSI driver components..."
      #     kubectl delete -f argo-cd/key-vault-csi-driver-installer.yaml --ignore-not-found=true

      - name: Delete ArgoCD Installation
        run: |
          echo "Deleting ArgoCD namespace..."
          kubectl delete namespace argocd --ignore-not-found=true
          echo "Waiting for ArgoCD namespace to terminate..."
          # Wait for namespace deletion, timeout after 5 minutes
          timeout 300 bash -c 'while kubectl get namespace argocd &> /dev/null; do sleep 10; done' || echo "Namespace argocd still terminating or does not exist."

      # Optional step: Delete application namespaces if they should also be removed
      # - name: Delete Application Namespaces (Optional)
      #   if: env.ENVIRONMENT == 'all' # Only run if cleaning up everything
      #   run: |
      #     echo "Deleting application namespaces..."
      #     kubectl delete namespace microservices-dev --ignore-not-found=true
      #     kubectl delete namespace microservices-prod --ignore-not-found=true 
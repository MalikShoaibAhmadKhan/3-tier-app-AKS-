name: Deploy to AKS

on:
  push:
    branches: [ main ]
    paths:
      - 'helm-chart/**'
      - 'frontend/**'
      - 'service-a/**'
      - 'service-b/**'
      - '.github/workflows/deploy.yml'
      - 'terraform/**'
      - 'argo-cd/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'helm-chart/**'
      - 'frontend/**'
      - 'service-a/**'
      - 'service-b/**'
      - '.github/workflows/deploy.yml'
      - 'terraform/**'
      - 'argo-cd/**'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  SERVICE_A_IMAGE_NAME: ${{ github.repository }}/service-a
  SERVICE_B_IMAGE_NAME: ${{ github.repository }}/service-b
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ github.ref == 'refs/heads/main' && format('{0}/{1}:stable', env.REGISTRY, env.FRONTEND_IMAGE_NAME) || '' }}

      - name: Build and push Service A Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-a
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_A_IMAGE_NAME }}:latest
            ${{ github.ref == 'refs/heads/main' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_A_IMAGE_NAME) || '' }}

      - name: Build and push Service B Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./service-b
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.SERVICE_B_IMAGE_NAME }}:latest
            ${{ github.ref == 'refs/heads/main' && format('{0}/{1}:stable', env.REGISTRY, env.SERVICE_B_IMAGE_NAME) || '' }}

  terraform:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER }}" \
            -backend-config="key=terraform-${{ env.ENVIRONMENT }}.tfstate" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  deploy-argocd:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP || 'aks-gitops-rg' }} \
            --name ${{ secrets.AKS_CLUSTER_NAME || 'aks-gitops-cluster' }}

      - name: Install ArgoCD
        run: |
          kubectl apply -f argo-cd/install.yaml
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

      - name: Install Azure Key Vault CSI Driver
        run: |
          # Apply the Key Vault CSI Driver installer
          kubectl apply -f argo-cd/key-vault-csi-driver-installer.yaml
          
          # Wait for the CSI driver to be available
          kubectl wait --for=condition=established --timeout=120s crd/secretproviderclasses.secrets-store.csi.x-k8s.io

      - name: Update secret-provider.yaml with tenant ID
        run: |
          # Replace placeholder with actual tenant ID
          sed -i "s/\${TENANT_ID}/${{ secrets.AZURE_TENANT_ID }}/g" argo-cd/secret-provider.yaml
          kubectl apply -f argo-cd/secret-provider.yaml

      - name: Deploy Applications with ArgoCD
        run: |
          # Update the repository URL in the application manifests
          sed -i "s|https://github.com/your-username/kubemicrodemo.git|${{ github.server_url }}/${{ github.repository }}.git|g" argo-cd/application.yaml
          
          # Apply the ArgoCD application manifests
          kubectl apply -f argo-cd/application.yaml
          
          # Print ArgoCD server URL
          echo "ArgoCD server URL: $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          
          # Print application URL (once available)
          echo "Waiting for frontend service to get external IP..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' service/frontend --timeout=300s || echo "Frontend service not available yet"
          
          # Print the URL if available
          if [[ $(kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) ]]; then
            echo "Application URL: http://$(kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          fi 